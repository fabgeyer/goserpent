{{if .GoTags}}//go:build {{.GoTags}}
{{end}}// Autogenerated by goserpent; DO NOT EDIT.

#include "{{.CHeaderFname}}"

PyObject* PyIncRef(PyObject *o) {
	Py_INCREF(o);
	return o;
}

char *PyObjectToChar(PyObject *obj) {
    char *result = NULL;
    if (PyUnicode_Check(obj)) {
        PyObject *utf8_string = PyUnicode_AsUTF8String(obj);
        if (utf8_string != NULL) {
            result = PyBytes_AsString(utf8_string);
            Py_DECREF(utf8_string);
        }
    }
    return result;
}

{{range .Types}}
PyObject *New_{{.GoTypeName}}(uintptr_t handle) {
	PyGILState_STATE gstate = PyGILState_Ensure();
	PyTypeObject *type = &{{.PyTypeObjectName}};
	{{.GoTypeName}} *self = ({{.GoTypeName}} *)type->tp_alloc(type, 0);
	PyGILState_Release(gstate);
    if (self != NULL) {
        self->handle = handle;
    }
    return (PyObject *)self;
}

PyObject *{{.GoTypeName}}_TpNew(PyTypeObject *type, PyObject *args, PyObject *kwds) {
	PyErr_SetString(PyExc_RuntimeError, "{{.GoTypeName}} should be directly created");
	return NULL;
}

{{range .Funcs}}{{template "fncpyexport" .}}{{end}}{{range .Methods}}{{template "fncpyexport" .}}{{end}}
{{end}}
{{range .Functions}}{{template "fncpyexport" .}}{{end}}
static PyMethodDef GoModuleMethods[] = {
{{range .Types}}{{range .Funcs}}	{{.PyModuleDef}},
{{end}}{{end}}
{{range .Functions}}	{{.PyModuleDef}},
{{end}}	{NULL, NULL, 0, NULL}
};

static struct PyModuleDef gomodule = {
	PyModuleDef_HEAD_INIT, "{{.CModuleName}}", NULL, -1, GoModuleMethods //
};

PyMODINIT_FUNC PyInit_{{.CModuleName}}(void) {
{{range .Types}}	if (PyType_Ready(&{{.PyTypeObjectName}}) < 0) {
        return NULL;
    }
{{end}}
	PyObject *m = PyModule_Create(&gomodule);
	if (m == NULL) {
		return NULL;
	}
{{range .Types}}
	Py_INCREF(&{{.PyTypeObjectName}});
    if (PyModule_AddObject(m, "{{.GoTypeName}}", (PyObject *) &{{.PyTypeObjectName}}) < 0) {
        Py_DECREF(&{{.PyTypeObjectName}});
        Py_DECREF(m);
        return NULL;
    }
{{end}}
	return m;
}
