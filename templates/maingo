{{if .GoTags}}//go:build {{.GoTags}}
{{end}}// Autogenerated by goserpent; DO NOT EDIT.

package {{.PackageName}}

/*
#cgo pkg-config: python3 python3-embed
#include <Python.h>
#include "{{.CHeaderFname}}"
*/
import "C"

{{if .Imports}}
import ({{range .Imports}}
	"{{.}}"{{end}}
){{end}}

func asGoBool(v C.int) bool {
	return v != 0
}

func asGoFloat[T ~float32 | ~float64](v *C.PyObject) T {
	if C.PyFloatCheck(v) != 1 {
		panic("Object is not PyFloat")
	}
	return T(C.PyFloat_AsDouble(v))
}

func asGoInt[T ~int | ~int8 | ~int16 | ~int32 | ~int64 | ~uint | ~uint8 | ~uint16 | ~uint32 | ~uint64 | ~uintptr](v *C.PyObject) T {
	if C.PyLongCheck(v) != 1 {
		panic("Object is not PyLong")
	}
	return T(C.PyLong_AsLong(v))
}

func asGoComplex64(v C.Py_complex) complex64 {
	return complex(float32(v.real), float32(v.imag))
}

func asGoComplex128(v C.Py_complex) complex128 {
	return complex(float64(v.real), float64(v.imag))
}

func pyObjectAsGoString(v *C.PyObject) string {
	if C.PyUnicodeCheck(v) != 1 {
		panic("Object is not PyUnicode")
	}
	cstr := C.PyObjectToChar(v)
	return C.GoString(cstr)
}

func asPyBool(v bool) *C.PyObject {
	if v {
		return C.PyIncRef(C.Py_True)
	} else {
		return C.PyIncRef(C.Py_False)
	}
}

func asPyLong[T ~int | ~int8 | ~int16 | ~int32 | ~int64 | ~uint | ~uint8 | ~uint16 | ~uint32 | ~uint64 | ~uintptr](v T) *C.PyObject {
	return C.PyIncRef(C.PyLong_FromLong(C.long(v)))
}

func asPyList[T any](vs []T, fn func(v T) *C.PyObject) *C.PyObject {
    list := C.PyList_New(C.long(len(vs)))
    for i, v := range vs {
        C.PyList_SetItem(list, C.long(i), fn(v))
    }
    return list
}

func asGoSlice[T any](obj *C.PyObject, fn func(*C.PyObject) T) []T {
	if C.PyListCheck(obj) == 1 {
		// https://docs.python.org/3/c-api/list.html
		res := make([]T, C.PyList_Size(obj))
		for i := range res {
			res[i] = fn(C.PyList_GetItem(obj, C.long(i)))
		}
		return res

	} else if C.PyTupleCheck(obj) == 1 {
		// https://docs.python.org/3/c-api/tuple.html
		res := make([]T, C.PyTuple_Size(obj))
		for i := range res {
			res[i] = fn(C.PyTuple_GetItem(obj, C.long(i)))
		}
		return res

	} else if C.PySequenceCheck(obj) == 1 {
		// https://docs.python.org/3/c-api/tuple.html
		res := make([]T, C.PySequence_Size(obj))
		for i := range res {
			res[i] = fn(C.PySequence_GetItem(obj, C.long(i)))
		}
		return res

	}
	panic("Invalid python object type")
}

func asGoMap[K comparable, V any](dict *C.PyObject, fnK func(*C.PyObject) K, fnV func(*C.PyObject) V) map[K]V {
	m := make(map[K]V)
	var pyKey, pyVal *C.PyObject
	var pos C.Py_ssize_t
	for {
		if C.PyDict_Next(dict, &pos, &pyKey, &pyVal) == 0 {
			break
		}
		m[fnK(pyKey)] = fnV(pyVal)
	}
	return m
}

{{if .WithNumpy}}
func asGoNumpyArray(obj *C.PyObject) *numpy.Array {
	if C.PyArrayCheck(obj) != 1 {
		panic("Object is not PyArray")
	}
	return numpy.AsArray(unsafe.Pointer(obj))
}
{{end}}

func asPyString(v string) *C.PyObject {
	return C.PyIncRef(C.PyUnicode_FromString(C.CString(v)))
}

func asPyFloat[T ~float32 | ~float64](v T) *C.PyObject {
	return C.PyIncRef(C.PyFloat_FromDouble(C.double(v)))
}

func goComplex64AsPyComplex(v complex64) *C.PyObject {
	return C.PyIncRef(C.PyComplex_FromDoubles(C.double(real(v)), C.double(imag(v))))
}

func goComplex128AsPyComplex(v complex128) *C.PyObject {
	return C.PyIncRef(C.PyComplex_FromDoubles(C.double(real(v)), C.double(imag(v))))
}

func identity[T any](v T) T {
	return v
}

func asPyDict[K comparable, V any](m map[K]V, keyToPyObject func(K) *C.PyObject, valToPyObject func(V) *C.PyObject) *C.PyObject {
	dict := C.PyDict_New()
	for k, v := range m {
		if C.PyDict_SetItem(dict, keyToPyObject(k), valToPyObject(v)) != 0 {
			C.PyErr_SetString(C.PyExc_RuntimeError, C.CString("Could not process Python dict"))
			return nil
		}
	}
	return dict
}

func asPyError(err error) *C.PyObject {
	if err == nil {
		return C.Py_None
	}
	C.PyErr_SetString(C.PyExc_RuntimeError, C.CString(err.Error()))
	return nil
}

func asPyBytes(v []byte) *C.PyObject {
	if v == nil {
		C.PyErr_SetString(C.PyExc_RuntimeError, C.CString("Received NULL pointer"))
		return nil
	}
	return C.PyIncRef(C.PyBytes_FromStringAndSize((*C.char)(unsafe.Pointer(&v[0])), C.long(len(v))))
}

{{range .Functions}}{{template "gopyexport" .}}{{end}}

{{range .Types}}
	func {{.GoTypeName}}ToPyObject(v *{{.GoTypeName}}) *C.PyObject {
		return C.PyIncRef(C.new_{{.GoTypeName}}(C.uintptr_t(cgo.NewHandle(v))))
	}
	{{range .Methods}}{{template "gopyexport" .}}{{end}}
	{{range .Funcs}}{{template "gopyexport" .}}{{end}}
{{end}}
